{"version":3,"sources":["editor/index.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","useState","textAreaValue","setTextAreaValue","useEffect","console","log","className","value","onChange","e","target","txt","res","replace","m","g","React","createElement","dangerouslySetInnerHTML","__html","txtToMarkDown","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0RAIe,SAASA,EAAOC,GAAQ,IAAD,EACQC,mBAAS,IADjB,mBAC3BC,EAD2B,KACZC,EADY,KAkClC,OAJAC,qBAAU,WACNC,QAAQC,IAAI,qBAEb,IAEC,yBAAKC,UAAU,YAEX,8BAAUA,UAAW,UACXC,MAAON,EACPO,SA9BlB,SAAsBC,GAClBP,EAAiBO,EAAEC,OAAOH,UAgCtB,yBAAKD,UAAU,aA7BvB,SAAuBK,GAEnB,IAAIC,EAAMX,EAOV,OADAW,GADAA,GADAA,GADAA,GADAA,GADAA,EAAMA,EAAIC,QAAQ,eAAe,SAACC,EAAGC,GAAJ,oBAAiBA,EAAjB,aACvBF,QAAQ,kBAAkB,SAACC,EAAGC,GAAJ,oBAAiBA,EAAjB,aAC1BF,QAAQ,qBAAqB,SAACC,EAAGC,GAAJ,oBAAiBA,EAAjB,aAC7BF,QAAQ,eAAe,SAACC,EAAGC,GAAJ,oBAAiBA,EAAjB,aACvBF,QAAQ,qBAAqB,SAACC,EAAGC,GAAJ,oBAAiBA,EAAjB,aAC7BF,QAAQ,UAAU,SAACC,EAAGC,GAAJ,gBACrBC,IAAMC,cAAc,IAAK,CAACC,wBAAyB,CAACC,OAAQP,KAsB1DQ,KClCFC,MAVf,WACE,OACE,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACR,EAAD,SCIYwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.3e1e8971.chunk.js","sourcesContent":["import './style.css'\r\nimport React, {useEffect, useState} from 'react';\r\n\r\n\r\nexport default function Editor(props) {\r\n    const [textAreaValue, setTextAreaValue] = useState(\"\")\r\n\r\n    let testString = 'hi there how are you?  <h3 style=\"color: red\"> h2 heading </h3>'\r\n\r\n\r\n    // let testString =\r\n\r\n\r\n    function handleChange(e) {\r\n        setTextAreaValue(e.target.value);\r\n    }\r\n\r\n    function txtToMarkDown(txt) {\r\n        // let res = textAreaValue.replace(/(\\n)/gm, (m, g) => `${m}<br>`);\r\n        let res = textAreaValue;\r\n        res = res.replace(/^[#] (.*)/gm, (m, g) => `<h1>${g}</h1>`);\r\n        res = res.replace(/^[#][#] (.*)/gm, (m, g) => `<h2>${g}</h2>`);\r\n        res = res.replace(/^[#][#][#] (.*)/gm, (m, g) => `<h3>${g}</h3>`);\r\n        res = res.replace(/^[-] (.*)/gm, (m, g) => `<li>${g}</li>`);\r\n        res = res.replace(/^[-][-][-] (.*)/gm, (m, g) => `<hr>${g}</hr>`);\r\n        res = res.replace(/(\\n)/gm, (m, g) => `<br>`);\r\n        return React.createElement(\"p\", {dangerouslySetInnerHTML: {__html: res}})\r\n    }\r\n\r\n    // function htmlDecode(input){\r\n    //     var e = document.createElement('div');\r\n    //     e.innerHTML = input;\r\n    //     return e.childNodes.length === 0 ? \"\" : e.childNodes[0].nodeValue;\r\n    // }\r\n    useEffect(() => {\r\n        console.log(\"useffect called\");\r\n\r\n    }, [])\r\n    return (\r\n        <div className=\"homePage\">\r\n\r\n            <textarea className={\"txtArea\"}\r\n                      value={textAreaValue}\r\n                      onChange={handleChange}\r\n            />\r\n\r\n            <div className=\"txtOutput\">\r\n                {/*<div dangerouslySetInnerHTML={{ __html: htmlDecode(testString) }} />*/}\r\n                {txtToMarkDown(textAreaValue)}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport Editor from \"./editor\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Editor/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}