{"version":3,"sources":["editor/index.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","useState","textAreaValue","setTextAreaValue","useEffect","console","log","className","value","onChange","e","target","txt","res","replace","m","g","React","createElement","dangerouslySetInnerHTML","__html","txtToMarkDown","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0RAIe,SAASA,EAAOC,GAAQ,IAAD,EACQC,mBAAS,IADjB,mBAC3BC,EAD2B,KACZC,EADY,KAqClC,OAJAC,qBAAU,WACNC,QAAQC,IAAI,qBAEb,CAACJ,IAEA,yBAAKK,UAAU,YAEX,yBAAKA,UAAW,YAAhB,sBAEI,8BAAUA,UAAW,UACXC,MAAON,EACPO,SAnCtB,SAAsBC,GAClBP,EAAiBO,EAAEC,OAAOH,WAsCtB,yBAAKD,UAAU,aAAf,mBAEI,yBAAKA,UAAU,aArC3B,SAAuBK,GAEnB,IAAIC,EAAMX,EAUV,OAFAW,GADAA,GADAA,GADAA,GADAA,GADAA,EAAMA,EAAIC,QAAQ,eAAe,SAACC,EAAGC,GAAJ,oBAAiBA,EAAjB,aACvBF,QAAQ,kBAAkB,SAACC,EAAGC,GAAJ,oBAAiBA,EAAjB,aAC1BF,QAAQ,kBAAkB,SAACC,EAAGC,GAAJ,oBAAiBA,EAAjB,aAC1BF,QAAQ,eAAe,SAACC,EAAGC,GAAJ,oBAAiBA,EAAjB,aACvBF,QAAQ,oBAAoB,SAACC,EAAGC,GAAJ,oBAAiBA,EAAjB,aAC5BF,QAAQ,aAAa,SAACC,EAAGC,GAAJ,gBAExBC,IAAMC,cAAc,MAAO,CAACC,wBAAyB,CAACC,OAAQP,KA2BxDQ,MC1CNC,MAVf,WACE,OACE,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACR,EAAD,SCIYwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.9b3e37d4.chunk.js","sourcesContent":["import './style.css'\r\nimport React, {useEffect, useState} from 'react';\r\n\r\n\r\nexport default function Editor(props) {\r\n    const [textAreaValue, setTextAreaValue] = useState(\"\")\r\n\r\n    let testString = 'hi there how are you?  <h3 style=\"color: red\"> h2 heading </h3>'\r\n\r\n\r\n    // let testString =\r\n\r\n\r\n    function handleChange(e) {\r\n        setTextAreaValue(e.target.value);\r\n    }\r\n\r\n    function txtToMarkDown(txt) {\r\n        // let res = textAreaValue.replace(/(\\n)/gm, (m, g) => `${m}<br>`);\r\n        let res = textAreaValue;\r\n\r\n\r\n        res = res.replace(/^[#] (.*)/gm, (m, g) => `<h1>${g}</h1>`);\r\n        res = res.replace(/^[#]{2} (.*)/gm, (m, g) => `<h2>${g}</h2>`);\r\n        res = res.replace(/^[#]{3} (.*)/gm, (m, g) => `<h3>${g}</h3>`);\r\n        res = res.replace(/^[-] (.*)/gm, (m, g) => `<li>${g}</li>`);\r\n        res = res.replace(/^[-][-][-](.*)/gm, (m, g) => `<hr>${g}</hr>`);\r\n        res = res.replace(/^\\s|w*$/gm, (m, g) => `<br>`);\r\n\r\n        return React.createElement(\"div\", {dangerouslySetInnerHTML: {__html: res}})\r\n    }\r\n\r\n    // function htmlDecode(input){\r\n    //     var e = document.createElement('div');\r\n    //     e.innerHTML = input;\r\n    //     return e.childNodes.length === 0 ? \"\" : e.childNodes[0].nodeValue;\r\n    // }\r\n    useEffect(() => {\r\n        console.log(\"useffect called\");\r\n\r\n    }, [textAreaValue])\r\n    return (\r\n        <div className=\"homePage\">\r\n\r\n            <div className={\"inputDiv\"}>\r\n                Enter Markdown Text\r\n                <textarea className={\"txtArea\"}\r\n                          value={textAreaValue}\r\n                          onChange={handleChange}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"outputDiv\">\r\n                MarkDown Preview\r\n                <div className=\"txtOutput\">\r\n                    {/*<div dangerouslySetInnerHTML={{ __html: htmlDecode(testString) }} />*/}\r\n                    {txtToMarkDown(textAreaValue)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Editor from \"./editor\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Editor/>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}